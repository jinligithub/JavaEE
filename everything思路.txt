1.JDBC驱动程序


步骤：
交互
遍历文件并且存到数据库
进行检索

功能：
检索文件信息：文件名模糊检索，文件名模糊检索+文件类型，最近检索文件

索引文件信息：文件系统 监听，全量检索+自定义目录

技术：
java文件操作
Database（嵌入式的H2数据库，或MySQL数据库）
JDBC
Lombok库（IDEA插件）
java多线程
文件系统监控（Apache Commons IO）

实现：
目标
1.搭建Maven项目
2.配置pom
3.创建包（按功能分类）
4.创建入口程序
5.简单的公共代码开发

H2是一个java数据库
优点：速度快，开源，他还是JDBC的API，
支持嵌入式和服务器模式的数据库：in-memory。把数据存到内存，不需要存到磁盘，操作速度快
他的控制台是基于浏览器的方式访问的
jar包特别小，非常轻量的纯java数据库


1.Git创建仓库
2.本地项目中  git init 
3.本地项目中创建 。gitignore添加不加入版本管理的目录和文件
4.git add .->git commit -message



基本模型类抽象
文件类型：png,doc,pdt,ppt,jar,jpeg,zip,rar,txt,sh,msi,
索引file的属性之后的信息  Thing
检索的参数（条件）-Condition

设计数据库表
创建数据库（everything-）
设计数据库表（Thing 类创建的对象属性）


数据库编程（DAO）
创建数据库源（dataSource）-依赖Druid数据库连接池
执行数控脚本（初始化数据库）


检索
1.数据库的初始化操作
2.数据库的访问工作（使用DataSource）
3.实现检索业务

~：表示用户目录
MySQL：

H2：jdbc:h2:filepath->存储到本地文件
jdbc:h2:~/filepath->存储到当前用户的home目录
jdbc :h2://ip:port/databaseName

因为 h2是一个嵌入式数据库，所以在指定数据库名字时会创建数据库，可以不用谢创建数据库的语句

final有三种初始化方式，立即初始化，构造方法初始化，构造块初始化



索引
1.数据库的初始化操作
2.・数据库的访问操作
3.实现索引业务（插入）
4.如何遍历文件系统中的所有文件，并且将文件对象转为Thing对象，调用数据库的插入操作
遍历文件系统中的所有文件
对特点的文件或目录进行排除
将文件转为Thing对象

索引
C：\（路径）


StringBuffer和StringBuilder



数据源的初始化：单例+工厂模式--->数据源的 初始化，以及数据源脚本的执行
为什么要用工厂模式

1.构件java对象，本来java对象是直接new一个对象，但是有一个问题：你可以反复去new对象，
但是这意味着对象在堆上占用的空间特别多。但是数据源的对象不需要反复去实例化对象，
因为连接的是一个数据库，没有必要去反复实例化数据源对象
2.这个工厂模式初始化的数据源是一个单对象，而且工厂类不会让用户随便去实例化对象，让工厂类成为天然的单例

何如读取项目里的数据文件


InputStream in =DataSourceFactory.class.getClassLoader().
getResourceAsStream("simple_everything");

有了InputSteam后，就可以吧Connection创建命令，执行就行InputStream流读取过来，
之后把它变成字符串，变成字符串后就可以获取SQL语句，然后执行语句 


检索
1.数据库的初始化操作
2.数据库的访问工作（使用DataSource）
3.实现检索业务

DataSourceFactory是一个工厂模式加单例模式
它是一个私有的意味着别人不可以实例化对象，但是可以调用这个类的静态方法dataSource（）就可以获取到数据源，但是这里又组合了单例模式
private static volatile DruidDataSource dataSource;
而且单例采用了双重检查，这样可以保证多线程情况下线程任然是一个不会出现线程竞争的问题

采用的是h2数据库，所以只需要设置一个数据库的驱动名称就好

dataSource.setDriverClassName("org.h2.Driver")
它是如何通过字符串就可以实例化一个driver对象：通过反射做到的，通过一个类的权限类提供的默认构造方法，我就可以提供反射来实例化一个反射对象

h2是一个嵌入式数据库，他的内容在本地存储，所以他不需要用户名和密码

JDBC  中必须提供一个Driver class 实现了javaAPI规范的driver类


JDBC规范中关于MySQL的Url：
jdbc:mysql://ip:port/database



JDBC规范中关于 h2的Url：
嵌入式的时候使用
jdbc:h2:filepath->存储到本地文件    绝对路径
jdbc:h2:~/filepath->存储到当前用户的home目录      不是绝对路径
存储到服务器使用：
jdbc :h2://ip:port/databaseName-->存储到服务器

获取数据源需要：Driver和Url

索引信息需要存储到数据库里面去，所以需要初始化数据库，
获取数据源
获取SQL语句
获取数据库连接和名称执行SQL

resource下的.sql文件也在target目录下的Classes目录下
要读取.sql文件可以通过绝对路径来读取，可以通过file的输入和输出流肯定可以读到，
也可以通过读取classpath下的文件，因为当前resource文件下的simple_everything.sql已经存在了。读取方法：把它当作一个类去 读，然后可以通过classLoad去加载。
获取classLoad的方法：DataSourceFactory.class.getClassLoader().getResourceAsStream("simple_everything");

DataSourceFactory.class：获得class对象
DataSourceFactory.class.getClassLoader()：获取到当前类的加载器
DataSourceFactory.class.getClassLoader().getResourceAsStream：把资源文件读取了，并且转化为stream流，

* 不采取绝对路径文件 ：因为当把项目发送给别人路径就发生了改变
* E:\JAVA\simple-everything\src\main\resources\simple_everything.sql
*
* 采取读取classpath文件下的路径：因为当前resource文件下的simple_everything.sql已经存在了
*/

输入流如何转化为SQL语句：IO流的处理方式
BufferedReader reader= new BufferedReader(new InputStreamReader(in)

读取内容：reader里有一个readLine（）方法一行一行的读取
因为有注释，所以用startWith（“--”）判断开头是不是注释。

JDBC编程
驱动加载
1.获取数据库连接
// Connection connection= dataSource.getConnection();
Connection connection = dataSource.getConnection();
2.//创建命令
PreparedStatement statement=connection.prepareStatement(sql);
3.//执行SQL语句
statement.execute();
4.//关闭连接，流
connection.close();
statement.close();




不用创建数据库，因为在H2指定数据源时已经指定了一个数据库，
-- 因为h2是嵌入式的它会呈现在本地文件中所以这里不需要单独创建数据库。但是MySQL需要

-- 创建数据库
-- create database if not exists simple_everything;
--  
-- 创建数据库表
drop table if exists file_index;
create table if not exists file_index(
  name varchar(256) not null comment'文件名称',
  path varchar(1024) not null comment'文件路径',
  depth int not null comment'文件路径深度',
  file_type varchar(32)  not null comment '文件类型'
);

被final修饰的属性初始化方式：
立即初始化
构造方法初始化
构造快初始化


查询文件的深度：
可以选择深度最小的，也可以选择深度较深的

为什么用StringBuilder而不用StringBuffer?
StringBuilder sqlBuilder=new StringBuilder();--》
因为StringBuffer是线程安全的，该方法在虚拟机里的方法栈上是线程独享的，当别的线程再次调用StringBuffer时会再new一个StringBuffer,而且StringBuffer的方法作用域在方法里面，离开 这个方法之后StringBuffer就会被销毁，所以StringBuffer不会被多线程共享，这就意味着StringBuffer不会产生线程竞争，所以这里不用StringBuffer
但是StringBuilder不用类的属性，因为一个对象可能会被多个线程同时访问，所以在属性上就改为StringBuffer



错误大总结：
1.在配置h2的数据库时配成了test，test的数据库只会在测试的时候生效
2.在定义Thing时把文件深度的类型弄错了写成了String类型，单实际上是Integer类型

索引
1.把电脑上的所有文件放到数据库里需要遍历所有文件，但是电脑上有很多盘符，所以要知道电脑上有那些盘符，然后进行递归遍历   -----第一个遍历
2.电脑上有很多文件。所以 必然要对文件进行排除，比如windows目录下的文件，Program Files目录下的文件----遍历的同时需要对某些文件进行排除
3.把文件遍历出来后每一个文件都是一个个的file对象，但是file对象没办法直接写道数据库里，所以需要把file对象转化为thing对象   --file对象转thing对象（因为有了thing对象，File IndexDao里面有一个insert（）方法，里面传一个thing对象就传到数据库里了）

索引：C:（路径）-> File(Collection)-->Thing (Collection)-->FileIndexDao(Insert)



三个问题：
1.如何遍历系统中的所有文件
首先要知道电脑有几个盘符，然后在对每个盘符进行遍历----根据盘符的数目获取线程数目，然后一个盘符一个线程去遍历，保证了遍历效率高

2.如何排除特定文件或目录
3.如何将file对象转为Thing对象




遍历文件的速度快还是写入数据库的时间快？
遍历文件的速度快，因为遍历文件只需要对文件路径的地址进行抽象，它不会进行网络的操作，但是写入数据库也要操作磁盘，也要写入数据，而且还是一条一条写，所以效率比较低（解决方法：把遍历，转化，写入拆分成三个小任务分别完成各自的任务）。







StringBuffer保证了线程安全，不会被多线程共享，

